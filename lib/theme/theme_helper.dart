import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              6,
            ),
          ),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: appTheme.blueGray900,
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: colorScheme.onPrimaryContainer,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              2,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.blueGray100,
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        bodyLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.redA70001,
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray50002,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: appTheme.redA70001,
          fontSize: getFontSize(
            32,
          ),
          fontFamily: 'Arial Rounded MT Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onError,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.redA70001,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray40002,
          fontSize: getFontSize(
            11,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.redA70001,
          fontSize: getFontSize(
            60,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.amberA400,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XFF3A3937),
    error: Color(0XEA202020),
    errorContainer: Color(0XFF7F7F7F),
    inversePrimary: Color(0XFF3A3937),
    inverseSurface: Color(0XEA202020),
    onBackground: Color(0XFFFFFFFF),
    onError: Color(0XFFBABABA),
    onErrorContainer: Color(0XFF131313),
    onInverseSurface: Color(0XFFBABABA),
    onPrimary: Color(0XEA202020),
    onPrimaryContainer: Color(0XFFFFFFFF),
    onSecondary: Color(0XFFFFFFFF),
    onSecondaryContainer: Color(0XEA202020),
    onSurface: Color(0XFFFFFFFF),
    onSurfaceVariant: Color(0XEA202020),
    onTertiary: Color(0XFFFFFFFF),
    onTertiaryContainer: Color(0XEA202020),
    outline: Color(0XEA202020),
    outlineVariant: Color(0XFF3A3937),
    primary: Color(0XFF2FF0B1),
    primaryContainer: Color(0XFF3A3937),
    scrim: Color(0XFF3A3937),
    secondary: Color(0XFF3A3937),
    secondaryContainer: Color(0XFFC5C5C5),
    shadow: Color(0XEA202020),
    surface: Color(0XFF3A3937),
    surfaceTint: Color(0XEA202020),
    surfaceVariant: Color(0XFFC5C5C5),
    tertiary: Color(0XFF3A3937),
    tertiaryContainer: Color(0XFFC5C5C5),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);
  Color get amberA400 => Color(0XFFFBC102);
  // Black
  Color get black900 => Color(0XFF0C0C0C);
  Color get black90001 => Color(0XFF000000);
  // Blue
  Color get blue300 => Color(0XFF5FA3FA);
  // BlueGray
  Color get blueGray100 => Color(0XFFCCCCCC);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray10002 => Color(0XFFD1D1D1);
  Color get blueGray400 => Color(0XFF8E8D82);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray900 => Color(0XFF2C2C2C);
  Color get blueGray90001 => Color(0XFF2F2F2F);
  // DeepOrange
  Color get deepOrangeA200 => Color(0XFFF17C30);
  // Gray
  Color get gray100 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFE7E7E7);
  Color get gray300 => Color(0XFFE2F0D9);
  Color get gray400 => Color(0XFFB0B0B0);
  Color get gray40001 => Color(0XFFC0C0C0);
  Color get gray40002 => Color(0XFFC7C7C7);
  Color get gray500 => Color(0XFF949494);
  Color get gray50001 => Color(0XFFA8A6A7);
  Color get gray50002 => Color(0XFF939393);
  Color get gray600 => Color(0XFF87867B);
  Color get gray60001 => Color(0XFF6D6D6D);
  Color get gray60002 => Color(0XFF6B6B6B);
  Color get gray700 => Color(0XFF656565);
  Color get gray70001 => Color(0XFF636363);
  Color get gray800 => Color(0XFF404040);
  Color get gray80001 => Color(0XFF434343);
  Color get gray900 => Color(0XFF171717);
  Color get gray90001 => Color(0XFF262626);
  Color get gray90002 => Color(0XFF131413);
  Color get gray90003 => Color(0XFF1C1C1C);
  // LightGreen
  Color get lightGreen600 => Color(0XFF76AB53);
  Color get lightGreen800 => Color(0XFF577C3F);
  // Red
  Color get redA700 => Color(0XFFFF0001);
  Color get redA70001 => Color(0XFFFF0000);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
